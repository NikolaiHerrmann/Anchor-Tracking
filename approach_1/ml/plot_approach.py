
import matplotlib.pyplot as plt
import numpy as np
from brokenaxes import brokenaxes


def get_max(std, mean):
    arr = []
    for i in range(len(std)):
        if std[i] + mean[i] > 1:
            arr.append(1 - mean[i])
        else:
            arr.append(std[i])
    return arr


# TODO read from files instead of hard-coding data like this
Bayes2 = [1.0, 1.0, 1.0, 0.9934640522875817, 0.9523809523809523, 1.0,
          0.876280535855004, 0.9623239079760819, 0.8541353383458647, 0.7672593228148784, 0.8834818775995247,
          0.9514203198413724, 0.9719576719576719, 0.8585064610551867, 0.9083333333333333, 1.0, 0.9901427846633326]

KNN2 = [1.0, 0.9589041095890412, 0.939795918367347, 0.8157729157729158, 0.923076923076923, 0.9736842105263158,
        0.7907636738906089, 0.8973684210526316, 0.6132541248172906, 0.6127020139431724, 0.7383194792628756,
        0.8952316452896948, 0.9695436222614825, 0.7640637140637141, 0.9877049180327868, 1.0, 0.854672205961036]

Reg2 = [1.0, 1.0, 1.0, 1.0, 0.9523809523809523, 1.0,
        0.8935574229691876, 0.9595468199033563, 0.8878625134264231, 0.7703445998727582, 0.8776563448694596,
        0.9556619976140525, 0.9793650793650793, 0.8586740855762596, 0.9809481612760302, 1.0, 0.9848264729620663]

Tree2 = [0.9873417721518987, 1.0, 1.0, 0.9658119658119658, 0.8799999999999999, 1.0,
         0.8311864406779662, 0.9268882466281311, 0.900751879699248, 0.9012074210683942, 0.8934265749394255,
         0.8498107426099496, 0.9735055472760391, 0.8757045088566828, 0.974712643678161, 1.0, 0.9485922132980957]

a2 = [Bayes2, KNN2, Reg2, Tree2]


Bayes = [0.9988835132117603, 0.9916699722332407, 0.9178212151902914, 0.9622230036240929, 0.9211065573770493, 0.9916699722332407,
         0.8289703124244431, 0.9756629073435007, 0.7112363920621955, 0.8885448939033407, 0.7930617018566058,
         0.8702068561957645, 0.9107912077016785, 0.870666791600024, 0.8043584227083364, 0.9588200050861849, 0.8108522417324494]

KNN = [0.9996281145407214, 0.9791056434290177, 0.7764797250859106, 0.9067458707029658, 0.8989650073928044, 0.9791056434290177,
       0.7359316756068547, 0.856230133254307, 0.6380313419753144, 0.7710841342396931, 0.6467106274636699,
       0.7459463516152068, 0.8768464025817305, 0.8628955623204938, 0.7339766732513415, 0.9455669444239609, 0.7870467313005908]

Reg = [0.9996281145407214, 0.9952362048431919, 0.884607084376736, 0.9769981047764612, 0.9190548014077426, 0.9952362048431919,
       0.861346088710877, 0.9755815454902078, 0.6947595769567598, 0.9196894249080881, 0.7518408578524584,
       0.8427031052991004, 0.9010122892553195, 0.8188230929416984, 0.8024332841637263, 0.9136245843366586, 0.8216634824230112]

Tree = [0.9996281145407214, 0.9990045789368903, 0.9395964398195382, 0.9746372138108299, 0.9329923273657289, 0.9990045789368903,
        0.8590462754911323, 0.9721832256061598, 0.7194004673096702, 0.8679390554653249, 0.7638086549388923,
        0.8711112893348607, 0.9453026873334812, 0.8764173761461607, 0.7885873626085458, 0.9636094770488921, 0.8509283716090893]

a1 = [Bayes, KNN, Reg, Tree]

fig, ax = plt.subplots(figsize=(9, 6))
bax = brokenaxes(xlims=((0, 0.01), (0.58, 1.01)), wspace=0.015)

for cls in a1:
    print(np.std(cls), end=",")

print("\n---------")

for cls in a2:
    print(np.std(cls), end=",")


data = {'Approach 1': [0.8317821519184472, 0.8945027039108352, 0.88671987336035, 0.9013645586060476],
        'Approach 2': [0.8667563468181081, 0.9393933269476933, 0.9471073206009192, 0.9358199974527033],
        'A1 error': [0.10978937580792127, 0.08083880605089448, 0.08710389317871699, 0.08370635168069877],
        'A2 error': [0.12253451825192248, 0.0674233040609546, 0.06458761547221332, 0.055575369816565356]
        }

ind = np.arange(4)
width = 0.4

bax.errorbar(data['Approach 1'], ind + width, xerr=([data['A1 error'],
             data['A1 error']]), ls='none', capsize=5, color="navy", alpha=0.4)
bax.errorbar(data['Approach 2'], ind, xerr=([get_max(data['A2 error'], data['Approach 2']), get_max(
             data['A2 error'], data['Approach 2'])]), ls='none', alpha=0.4, capsize=5, color="darkred")


bax.barh(ind + width, data['Approach 1'], width, label="A1")
bax.barh(ind, data['Approach 2'], width, label="A2", color="tomato")

plt.title('Performance Comparison between Approaches', pad=20, fontsize=15)
bax.legend(loc='upper center', ncol=2, bbox_to_anchor=(0.5, 1.05), fontsize=11)

bax.set_ylabel('Classifier', fontsize=16, labelpad=58)
bax.set_xlabel('Average F1 Score', fontsize=15, labelpad=25)

ax.get_xaxis().set_visible(False)
ax.get_yaxis().set_visible(False)
ax.set_axis_off()
plt.ticklabel_format(useOffset=False)
bax.axs[0].set_yticks(ind + 0.20)
bax.axs[0].set_yticklabels(['KNN', 'Bayes', 'Log Reg', 'D-Tree'], fontsize=12)
bax.axs[1].tick_params(axis='x', labelsize=12)
bax.axs[0].tick_params(axis='x', labelsize=12)
plt.savefig("approach_compare.pdf")
plt.show()
